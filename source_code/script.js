const without_anime_checkbox = document.createElement("input");
without_anime_checkbox.type = "checkbox";
without_anime_checkbox.id = "without_anime";
document.body.appendChild(without_anime_checkbox);
if (localStorage.getItem("without_anime") === null) { localStorage.setItem("without_anime", false); }

const limit = 10;
let ModelsSelectedType = 'Checkpoint';
const baseUrl = `https://civitai.com/api/v1/models?limit=${limit}&sort=Newest&types=${ModelsSelectedType}`;
var loader = document.createElement('div');
loader.className = 'loader';
var PreloadText = document.createElement('span');
PreloadText.textContent = '–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö';
loader.appendChild(PreloadText);
document.body.appendChild(loader);
function fetchData(urls) {
    showLoader();
    Promise.all(urls.map(url => fetch(url).then(response => {
        if (!response.ok) {
            throw new Error(`–≤—ã–ø–∞–ª –ø—Ä–æ–ª–∞–ø—Å: ${response.statusText}`);
        }
        return response.json();
    })))
        .then(results => {
            let content = '';
            content += `<header><div class="clipboard"><label title="–≤–∫–ª/–≤—ã–∫–ª –≤–µ–¥–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"><input type="checkbox" id="clipboard_switch" /><span class="clipboard_switch"></span></label></div><div class="hide_anime"><label title="—Å–∫—Ä—ã—Ç–∏–µ/–ø–æ–∫–∞–∑ –º–æ–¥–µ–ª–µ–π —Å —Ç–µ–≥–æ–º anime"><input type="checkbox" name="" id="without_anime"><span class="anime_switch"></span></label></div></header>`
            let uniqueIds = new Set();
            results.forEach(data => {
                const items = data.items;
                const metadata = data.metadata;
                items.forEach(item => {
                    if (!uniqueIds.has(item.id)) {
                        uniqueIds.add(item.id);
                        let without_anime = document.querySelector("#without_anime").checked;
                        if (without_anime ? (!('mode' in item) && (!item.tags || item.tags.length === 0) || (item.tags && !item.tags.includes("anime"))) : (!('mode' in item))) {
                            content += `<div class="model_item" type="${item.type}">`
                            if (item.modelVersions[0] && item.modelVersions[0].downloadUrl) {
                                content += `<h2 class="model_name"><a class="file_url" ModelUrl="${item.modelVersions[0].downloadUrl}">${item.name}</a>`
                                if (item.stats.rating) { content += `<div class="rating">—Ä–µ–π—Ç–∏–Ω–≥: ${item.stats.rating} (–≥–æ–ª–æ—Å–æ–≤: ${item.stats.ratingCount})</div>`; }
                                content += `<a class="download_latest" href="${item.modelVersions[0].downloadUrl}">‚≠≥</a></h2>`;
                            }
                            content += `<div class="versions"> –≤–µ—Ä—Å–∏–∏:`
                            const versions = item.modelVersions;
                            versions.forEach(version => { if (version.name) { content += `<a class="version_url" versurl="${version.downloadUrl}">${version.name}</a>`; } });
                            content += `</div>`
                            if (item.modelVersions[0] && item.modelVersions[0].trainedWords && item.modelVersions[0].trainedWords.length > 0) { content += `<div class="triggers">${item.modelVersions[0].trainedWords.map(trainedWord => `<n>${trainedWord}</n>`).join('')}</div>`; }
                            if (item.tags && item.tags.length > 0) { content += `<div class="tags">${item.tags.map(tag => `<n>${tag}</n>`).join('')}</div>`; }
                            if (item.modelVersions[0] && item.modelVersions[0].images && item.modelVersions[0].images.length > 0) {
                                content += `<div class="images">`
                                const images = item.modelVersions[0].images.slice(0, 5);
                                images.forEach(image => {
                                    content += `<div class="preview">`
                                    if (image.url) { content += `<div class="picture"><img class="img" src="${image.url}" alt="${item.name}" /></div>`; }
                                    if (image.meta) { content += `<div class="img_params">`; } else { content += `<div class="no_params">—ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö</div>`; }
                                    if (image.meta && image.meta.seed) { content += `<div class="seed">seed: <n>${image.meta.seed}</n></div>`; }
                                    if (image.meta && image.meta.steps) { content += `<div class="steps">steps: <n>${image.meta.steps}</n></div>`; }
                                    if (image.meta && image.meta.prompt) { content += `<div class="prompt">prompt: <n>${image.meta.prompt}</n></div>`; }
                                    if (image.meta && image.meta.negativePrompt) { content += `<div class="negative">negative: <n>${image.meta.negativePrompt}</n></div>`; }
                                    if (image.meta && image.meta.sampler) { content += `<div class="sampler">sampler: <n>${image.meta.sampler}</n></div>`; }
                                    if (image.meta && image.meta.cfgScale) { content += `<div class="cfgScale">cfg: <n>${image.meta.cfgScale}</n></div>`; }
                                    if (image.meta && image.meta["Denoising strength"]) { content += `<div class="hires">hires up: <n>${image.meta["Hires upscale"]}, ${image.meta["Hires upscaler"]}, denoise ${image.meta["Denoising strength"]}</n></div>`; }
                                    if (image.meta && item.type != 'Checkpoint' && image.meta.Model) { content += `<div class="checkpoint">–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${image.meta.Model}</div>`; }
                                    if (image.meta) { content += `</div>`; }
                                    content += `</div>`
                                });
                                content += `</div>`
                            } else { content += `<div class="noimage">–ª–∏–±–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã —Ü–∏–≤–∏—Ç–∞–∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏, –ª–∏–±–æ - <a href="https://civitai.com/user/${item.creator.username}">—ç—Ç–æ—Ç –ø–∏–¥—Ä</a> –Ω–µ —É–¥–æ—Å—É–∂–∏–ª—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É</div>` }

                            if (item.description) { content += `<details class="info"><summary>–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</summary><div class="description">${item.description}</div></details>`; }
                            content += `</div>`
                        }
                        if (document.querySelector("#empty")) {document.querySelector("#empty").remove();}
                    }
                });
            });
            if (results.length > 0) {
                const metadata = results[0].metadata;
                const currentPage = metadata.currentPage;
                const totalPages = metadata.totalPages;
                content += generatePagination(currentPage, totalPages, ModelsSelectedType);
            }
            content += footer_content;
            document.getElementById('content').innerHTML = content;
            lesstext(document.querySelectorAll('div.prompt > n'), 350);
            lesstext(document.querySelectorAll('div.negative > n'), 350);

// - - //
            var imagesElements = document.querySelectorAll('.images');
            for (var i = 0; i < imagesElements.length; i++) {
                (function () {
                    var imagesElement = imagesElements[i];
                    var previewElements = imagesElement.querySelectorAll('.preview');
                    if (previewElements.length > 1) {
                        var currentPreviewIndex = 0;
                        var LeafOver = document.createElement('span');
                        LeafOver.setAttribute("class", "leafover")
                        imagesElement.prepend(LeafOver);
                        var prevButton = document.createElement('button');
                        prevButton.textContent = 'ü°∞';
                        prevButton.addEventListener('click', function () {
                            previewElements[currentPreviewIndex].style.display = 'none';
                            currentPreviewIndex--;
                            if (currentPreviewIndex < 0) {
                                currentPreviewIndex = previewElements.length - 1;
                            }
                            previewElements[currentPreviewIndex].style.display = 'flex';
                        });
                        LeafOver.prepend(prevButton);
                        var nextButton = document.createElement('button');
                        nextButton.textContent = 'ü°≤';
                        nextButton.addEventListener('click', function () {
                            previewElements[currentPreviewIndex].style.display = 'none';
                            currentPreviewIndex++;
                            if (currentPreviewIndex >= previewElements.length) {
                                currentPreviewIndex = 0;
                            }
                            previewElements[currentPreviewIndex].style.display = 'flex';
                        });
                        LeafOver.prepend(nextButton);
                    }
                })();
            }
            var SmallImgs = document.querySelectorAll('img.img');
            for (var i = 0; i < SmallImgs.length; i++) {
                var SmallImg = SmallImgs[i];
                SmallImg.addEventListener('click', function (event) {
                    var imgSrc = event.target.src;
                    var newImgSrc = imgSrc.replace('/width=450/', '/optimized=false/');
                    var FullBigImage = document.createElement('div');
                    var FullImgPreloadText = document.createElement('span');
                    FullImgPreloadText.textContent = '–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏'
                    FullBigImage.appendChild(FullImgPreloadText);
                    FullBigImage.setAttribute("class", "fullimage_container")
                    var FullImg = document.createElement('img');
                    FullImg.setAttribute("class", "fullimage")
                    FullImg.src = newImgSrc;
                    FullBigImage.appendChild(FullImg);
                    document.body.appendChild(FullBigImage);
                    if (FullBigImage) {
                        FullBigImage.addEventListener('click', function (event) {
                            if (event.target === FullBigImage) {FullBigImage.remove();}
                        });
                        document.addEventListener('keydown', function (event) {
                            if (event.key === 'Escape') {FullBigImage.remove();}
                        });
                    }
                });
            }
            var detailsElements = document.querySelectorAll('div.model_item > details.info');
            detailsElements.forEach(function (details) {
                var collapseLink = document.createElement('a');
                collapseLink.setAttribute('class', 'collapse_info')
                collapseLink.href = '#';
                collapseLink.textContent = '—Å–≤–µ—Ä–Ω—É—Ç—å';
                collapseLink.addEventListener('click', function (event) {
                    event.preventDefault();
                    details.removeAttribute('open');
                    var modelItem = details.closest('div.model_item');
                    var lastChild = modelItem.querySelector('div.images > div.preview:not(style[display=none]) > div.img_params:last-child');
                    if (lastChild) {
                        lastChild.scrollIntoView({ behavior: 'smooth' });
                    }
                });
                details.appendChild(collapseLink);
            });

            var keywordsToRemove = ['buymeacoffee.com', 'bmc.link', 'ko-fi.com', 'patreon.com', 'boosty.to', 'discordapp.com', 'discord.gg', 'threads.net', 'instagram.com', 'streamlabs.com'];
            var descriptionElements = document.querySelectorAll('div.description');
            for (var i = 0; i < descriptionElements.length; i++) {
                var descriptionElement = descriptionElements[i];
                var linkElements = descriptionElement.querySelectorAll('a');
                for (var j = 0; j < linkElements.length; j++) {
                    var linkElement = linkElements[j];
                    if (keywordsToRemove.some(keyword => linkElement.href.includes(keyword))) {
                        linkElement.remove();
                    }
                }
            }
            url_copier('a.file_url', 'modelurl');
            url_copier('a.version_url', 'versurl');

            if (!document.querySelector("body > div.up_arrow")) {UpArrowButton();}

            var typesList = ["Checkpoint", "LORA", "LoCon", "TextualInversion", "VAE", "Hypernetwork", "Controlnet", "Poses", "Other"];
            var namesList = ["–º–æ–¥–µ–ª–∏", "–ª–æ—Ä—ã", "–ª–∏–∫–æ—Ä–∏—Å—ã", "–≤–Ω–µ–¥—Ä–µ–Ω–∏—è", "–≤–∞—ç", "–≥–∏–ø–µ—Ä—Å–µ—Ç–∏", "–∫–æ–Ω—Ç—Ä–æ–ª–Ω–µ—Ç", "–ø–æ–∑—ã", "–¥—Ä—É–≥–æ–µ"];
            let headerTypeText = '–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
            const ModelTypeHeader = document.createElement('div');
            ModelTypeHeader.setAttribute('class', 'modeltype_header');
            if (document.querySelector('div.model_item')) { headerTypeText = namesList[typesList.indexOf(document.querySelector('div.model_item').getAttribute('type'))]; }
            ModelTypeHeader.textContent = headerTypeText;
            if (headerTypeText === '–º–æ–¥–µ–ª–∏') {
                ModelTypeHeader.textContent = 'StableDiffusion checkpoints: –º–æ–¥–µ–ª–∏ –≤–µ—Å–æ–≤';
            } else if (headerTypeText === '–ª–æ—Ä—ã') {
                ModelTypeHeader.textContent = 'StableDiffusion LoRa: –Ω–∏–∑–∫–æ—Ä–∞–Ω–≥–æ–≤—ã–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π';
            } else if (headerTypeText === '–ª–∏–∫–æ—Ä–∏—Å—ã') {
                ModelTypeHeader.textContent = 'StableDiffusion LyCORIS: LoCon/LoHA –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–π –≤–µ—Å–æ–≤';
            } else if (headerTypeText === '–≤–Ω–µ–¥—Ä–µ–Ω–∏—è') {
                ModelTypeHeader.textContent = 'StableDiffusion Embedding Textual Inversions: –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏–Ω–≤–µ—Ä—Å–∏–π';
            } else if (headerTypeText === '–≤–∞—ç') {
                ModelTypeHeader.textContent = 'StableDiffusion VAE: –≤–µ—Å–∞ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–≤—Ç–æ—ç–Ω–∫–æ–¥–µ—Ä–æ–≤';
            } else if (headerTypeText === '–≥–∏–ø–µ—Ä—Å–µ—Ç–∏') {
                ModelTypeHeader.textContent = 'StableDiffusion Hypernetworks: –≥–∏–ø–µ—Ä—Å–µ—Ç–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ø–µ—Ä–µ–∫—Ä–µ—Å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è';
            } else if (headerTypeText === '–∫–æ–Ω—Ç—Ä–æ–ª–Ω–µ—Ç') {
                ModelTypeHeader.textContent = 'StableDiffusion ControlNet: —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–µ—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π';
            } else if (headerTypeText === '–ø–æ–∑—ã') {
                ModelTypeHeader.textContent = 'StableDiffusion Poses: –Ω–∞–±–æ—Ä—ã –ø–æ–∑ OpenPose';
            } else if (headerTypeText === '–¥—Ä—É–≥–æ–µ') {
                ModelTypeHeader.textContent = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –≥–∞–π–¥—ã, –≤–æ—Ä–∫—Ñ–ª–æ—É';
            }
            ModelTypeHeader.title = ModelTypeHeader.textContent;
            ModelTypeHeader.setAttribute('trimmed', ModelTypeHeader.textContent.slice(0, ModelTypeHeader.textContent.indexOf(":")));

            document.querySelector("header").appendChild(ModelTypeHeader);
            var selectElement = document.createElement('select');
            selectElement.setAttribute('id', 'models_type_selector');
            for (var i = 0; i < typesList.length; i++) {
                var optionElement = document.createElement('option');
                optionElement.value = typesList[i];
                optionElement.textContent = namesList[i];
                selectElement.appendChild(optionElement);
            }
            selectElement.addEventListener('change', function (event) {
                var selectedType = event.target.value;
                localStorage.setItem('selectedType', selectedType);
                fetchData([`https://civitai.com/api/v1/models?limit=${limit}&sort=Newest&types=` + selectedType])
                ModelsSelectedType = selectedType;
                const metadata = results[0].metadata;
                const currentPage = metadata.currentPage;
                const totalPages = metadata.totalPages;
                content += generatePagination(currentPage, totalPages, ModelsSelectedType);
            });
            document.querySelector("header").appendChild(selectElement);

            const customSelect = document.createElement("ul");
            customSelect.classList.add("custom-select");

            const placeholderLi = document.createElement("li");
            placeholderLi.classList.add("placeholder");
            customSelect.appendChild(placeholderLi);

            selectElement.querySelectorAll("option").forEach(option => {
                const li = document.createElement("li");
                li.textContent = option.textContent;
                li.dataset.value = option.value;
                customSelect.appendChild(li);
            });

            customSelect.addEventListener("click", event => {
                if (event.target.tagName === "LI" && !event.target.classList.contains("placeholder")) {
                    selectElement.value = event.target.dataset.value;
                    selectElement.dispatchEvent(new Event("change"));
                    placeholderLi.textContent = event.target.textContent;
                    customSelect.classList.remove("open");
                }
            });

            placeholderLi.addEventListener("click", () => {
                customSelect.classList.toggle("open");
            });

            document.addEventListener("click", event => {
                if (!customSelect.contains(event.target)) {
                    customSelect.classList.remove("open");
                }
            });

            selectElement.parentNode.insertBefore(customSelect, selectElement);
            selectElement.style.display = "none";

            if (headerTypeText != '–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ') {customSelect.querySelector("li").textContent = headerTypeText;} else { customSelect.querySelector("li").textContent = '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'; }

            var savedSelectedType = localStorage.getItem('selectedType');
            if (savedSelectedType) {
                selectElement.value = savedSelectedType;
                ModelsSelectedType = savedSelectedType;
            }

            var findnew = document.createElement('div');
            findnew.setAttribute('class', 'findnew');
            document.querySelector("header").appendChild(findnew);
            findnew.innerHTML = `<div class="popular"><div class="malefocus"></div><div class="topdownload"></div><div class="liked"></div></div>`
            var search = document.createElement('div');
            search.setAttribute('class', 'search');
            findnew.appendChild(search);
            var inputElement = document.createElement('input');
            inputElement.placeholder = '–≤–≤–µ–¥–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è –ø–æ–∏—Å–∫–∞';
            inputElement.type = 'text';
            inputElement.setAttribute('class', 'search_field');
            inputElement.addEventListener('keydown', function (event) {
                if (event.key === 'Enter') {
                    var selectedType = selectElement.value;
                    var enteredText = event.target.value;
                    fetchData([
                        `https://civitai.com/api/v1/models?limit=50&sort=Newest&types=` + selectElement.value + `&query=` + enteredText,
                        `https://civitai.com/api/v1/models?limit=50&sort=Newest&types=` + selectElement.value + `&username=` + enteredText,
                        `https://civitai.com/api/v1/models?limit=50&sort=Newest&types=` + selectElement.value + `&tag=` + enteredText
                    ]);
                }
            });

            var buttonElement = document.createElement('button');
            buttonElement.setAttribute('class', 'search_button');
            buttonElement.addEventListener('click', function () {
                var selectedType = selectElement.value;
                var enteredText = inputElement.value;
                fetchData([
                    `https://civitai.com/api/v1/models?limit=50&sort=Newest&types=` + selectElement.value + `&query=` + enteredText,
                    `https://civitai.com/api/v1/models?limit=50&sort=Newest&types=` + selectElement.value + `&username=` + enteredText,
                    `https://civitai.com/api/v1/models?limit=50&sort=Newest&types=` + selectElement.value + `&tag=` + enteredText
                ]);
            });
            search.appendChild(inputElement);
            search.appendChild(buttonElement);

            var tagElements = document.querySelectorAll('div.tags > n');
            for (var i = 0; i < tagElements.length; i++) {
                var tagElement = tagElements[i];
                tagElement.addEventListener('click', function (event) {
                    var selectedType = selectElement.value;
                    var tagText = event.target.textContent;
                    fetchData([`https://civitai.com/api/v1/models?limit=100&sort=Newest&types=` + selectedType + `&tag=` + tagText]);
                });
            }

            const gay_tags = ['gay', 'homoerotic', 'homosexual', 'masculine', 'male focus', 'homo', 'manly', 'group male', 'muscular male', 'naked men', 'mature men', 'mature male', 'mature man', 'naked man', 'muscular', 'sexy men', 'bara', 'daddy', 'twink', 'boys', 'bodybuilder', 'muscles', 'cock', 'dick', 'penis', 'male', 'man', 'men', 'lgbtqia+', 'lgbt', 'yaoi',];
            document.querySelector("div.malefocus").addEventListener('click', function () {
                const urls = gay_tags.map(gay_tag => `https://civitai.com/api/v1/models?limit=100&sort=Newest&types=${selectElement.value}&tag=${gay_tag}`);
                fetchData(urls);
            });

            document.querySelector("div.topdownload").addEventListener('click', function () {
                fetchData([`https://civitai.com/api/v1/models?limit=100&sort=Most Downloaded&types=` + selectElement.value]);
            });

            document.querySelector("div.liked").addEventListener('click', function () {
                fetchData([`https://civitai.com/api/v1/models?limit=100&sort=Most Liked&types=` + selectElement.value]);
            });

            hideLoader();
            if (document.querySelectorAll('div.model_item').length === 0) {
                var emptyDiv = document.createElement('div');
                emptyDiv.id = 'empty';
                emptyDiv.innerHTML = `<h3>–ü–æ–∏—Å–∫ –ø–æ civitai –Ω–µ –¥–∞–ª –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!</h3><div>–≠—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –ø–æ –∏—Å–∫–æ–º–æ–º—É –∑–∞–ø—Ä–æ—Å—É –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞ —Ü–∏–≤–∏—Ç–∞–∏ –∫—Ä–∞–π–Ω–µ –ø–ª–æ—Ö–æ–π –ø–æ–∏—Å–∫–æ–≤–∏–∫.</div><div>–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:<ol><li>–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ–±–µ–ª—ã –≤ –∑–∞–ø—Ä–æ—Å–µ</li><li>–ø–æ–∏—Å–∫ –Ω–∞ —Ü–∏–≤–∏—Ç–∞–∏ –Ω–µ –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π, –∏ –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–≥–∞–º, —Ç–æ—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º –º–æ–¥–µ–ª–µ–π, –∏–º–µ–Ω–∞–º –∞–≤—Ç–æ—Ä–æ–≤</li><li>–≤–æ–∑–º–æ–∂–Ω–æ —Ç—ã —Å–¥–µ–ª–∞–ª –æ–ø–µ—á–∞—Ç–∫—É, –∏–ª–∏ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–≤–µ–∑–ª–æ</li></ol></div><div>–≤–µ—Ä–Ω–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ —á—Ç–æ —Ç–µ–±—è –µ—â–µ –º–æ–∂–µ—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å:</div><div class="popular"><span class="malefocus">–º—É–∂—Å–∫–∏–µ –º–æ–¥–µ–ª–∏</span><span class="topdownload">—Ç–æ–ø-100 –ø–æ –∑–∞–≥—Ä—É–∑–∫–∞–º</span><span class="liked">—Ç–æ–ø-100 –ø–æ –ª–∞–π–∫–∞–º</span></div>`;
                document.querySelector("#content > header").parentNode.insertBefore(emptyDiv, document.querySelector("#content > header").nextSibling);
                document.querySelector("#content > div.pagination").remove();
                document.querySelector("span.malefocus").addEventListener('click', function () {
                    const urls = gay_tags.map(gay_tag => `https://civitai.com/api/v1/models?limit=100&sort=Newest&types=${selectElement.value}&tag=${gay_tag}`);
                    console.log(urls);
                    fetchData(urls);
                });

                document.querySelector("span.topdownload").addEventListener('click', function () {
                    fetchData([`https://civitai.com/api/v1/models?limit=100&sort=Most Downloaded&types=` + selectElement.value]);
                });

                document.querySelector("span.liked").addEventListener('click', function () {
                    fetchData([`https://civitai.com/api/v1/models?limit=100&sort=Most Liked&types=` + selectElement.value]);
                });
            } else if (document.querySelectorAll('div.model_item').length > limit) {document.querySelector("#content > div.pagination").remove();}

            let modal = document.querySelector("div.readme_modal");
            modal.classList.add("hidden");

            let link = document.querySelector("footer > div.readme > a");
            link.addEventListener("click", function () {
                modal.classList.remove("hidden");
                setTimeout(function () {
                    let textStart = document.querySelector("#content > div.readme_modal > div.readme_modal_content > h3");
                    textStart.scrollIntoView({ behavior: "smooth" });
                }, 100);
            });

            let closeLink = document.createElement("a");
            closeLink.textContent = "—è—Å–Ω–æ!";
            closeLink.addEventListener("click", function () {
                modal.classList.add("hidden");
            });
            document.querySelector("div.readme_modal_content").appendChild(closeLink);

        }).catch(error => {
            hideLoader();
            let errorDiv = document.createElement('div');
            errorDiv.className = 'error_container';
            document.querySelector("#content").appendChild(errorDiv);
            let content = `<div>–¥–∞–Ω—ã–µ —Å civitai –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: <span>¬´${error}¬ª</span></div><div>—ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–Ω–µ api civitai –∏–ª–∏ –∏—Ö —Å–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞ —É–ø–∞–ª, –ª–∏–±–æ —É —Ç–µ–±—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é, –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –º–∞–Ω—è-–±–µ–∑–æ–ø–∞—Å—Ç–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–∞ - –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞: <code><span>Ctrl</span> + <span>Shift</span> + <span>I</span><code></div>`;
            let errorElement = document.createElement('div');
            errorElement.className = 'error';
            errorElement.innerHTML = content;
            errorDiv.appendChild(errorElement);
            let countdownElement = document.createElement('div');
            countdownElement.className = 'countdown';
            let seconds = 10;
            countdownElement.innerHTML = `—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ <span>${seconds}</span> —Å–µ–∫—É–Ω–¥`;
            errorDiv.appendChild(countdownElement);
            let intervalId = setInterval(() => {
                seconds--;
                countdownElement.innerHTML = `—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ <span>${seconds}</span> —Å–µ–∫—É–Ω–¥`;
                if (seconds === 0) {
                    clearInterval(intervalId);
                    location.reload();
                    console.log('–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞')
                }
            }, 1000);
        });
}

fetchData([baseUrl]);

// - - //

function hideLoader() {
    loader.style.display = 'none';
    loader.style.backdropFilter = 'blur(0px)'
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
}

function showLoader() {
    loader.style.display = 'flex';
    loader.style.backdropFilter = 'blur(10px)';
}

function generatePagination(currentPage, totalPages, ModelsSelectedType) {
    let content = '<div class="pagination"><ul class="pages">';
    const firstPage = Math.max(1, currentPage - 2);
    const lastPage = Math.min(totalPages, currentPage + 2);

    if (firstPage > 1) {
        for (let i = 1; i <= Math.min(5, firstPage - 1); i++) {
            content += `<li class="page_number"><a href="#" onclick="fetchData(['https://civitai.com/api/v1/models?limit=${limit}&sort=Newest&types=${ModelsSelectedType}&page=${i}']);return false;">${i}</a></li>`;
        }
        if (firstPage > 6) {
            content += `<li class="page_number">...</li>`;
        }
    }

    for (let i = firstPage; i <= lastPage; i++) {
        if (i === currentPage) {
            content += `<li class="page_number current_page">${i}</li>`;
        } else {
            content += `<li class="page_number"><a href="#" onclick="fetchData(['https://civitai.com/api/v1/models?limit=${limit}&sort=Newest&types=${ModelsSelectedType}&page=${i}']);return false;">${i}</a></li>`;
        }
    }

    if (lastPage < totalPages) {
        if (lastPage < totalPages - 5) {
            content += `<li class="page_number">...</li>`;
        }
        for (let i = Math.max(lastPage + 1, totalPages - 4); i <= totalPages; i++) {
            content += `<li class="page_number"><a href="#" onclick="fetchData(['https://civitai.com/api/v1/models?limit=${limit}&sort=Newest&types=${ModelsSelectedType}&page=${i}']);return false;">${i}</a></li>`;
        }
    }

    content += '</ul></div>';
    return content;
}

function lesstext(textelement, max) {
    for (var i = 0; i < textelement.length; i++) {
        (function () {
            var promptElement = textelement[i];
            var text = promptElement.textContent;
            if (text.length > 300) {
                var textElement = document.createElement('span');
                var truncatedText = text.slice(0, max) + '...';
                textElement.textContent = truncatedText;
                promptElement.textContent = '';
                promptElement.appendChild(textElement);
                var showMoreLink = document.createElement('a');
                showMoreLink.setAttribute("class", "show_more")
                showMoreLink.textContent = '–ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ';
                showMoreLink.href = '#';
                showMoreLink.addEventListener('click', function (event) {
                    event.preventDefault();
                    textElement.textContent = text;
                    showMoreLink.style.display = 'none';
                    showLessLink.style.display = 'inline';
                });
                promptElement.appendChild(showMoreLink);
                var showLessLink = document.createElement('a');
                showLessLink.setAttribute("class", "show_less")
                showLessLink.textContent = '–ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—å—à–µ';
                showLessLink.href = '#';
                showLessLink.style.display = 'none';
                showLessLink.addEventListener('click', function (event) {
                    event.preventDefault();
                    textElement.textContent = truncatedText;
                    showMoreLink.style.display = 'inline';
                    showLessLink.style.display = 'none';
                });
                promptElement.appendChild(showLessLink);
            }
        })();
    }
}

function url_copier(LinkSelectors, URLattribute) {
    var LinkSelectors = document.querySelectorAll(LinkSelectors);
    for (var i = 0; i < LinkSelectors.length; i++) {
        var LinkSelector = LinkSelectors[i];
        LinkSelector.addEventListener('click', function (event) {
            event.preventDefault();
            var modelUrl = event.target.getAttribute(URLattribute);
            navigator.clipboard.writeText(modelUrl);
            var originalText = event.target.textContent;
            event.target.textContent = '—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
            setTimeout(function () {
                event.target.textContent = originalText;
            }, 2000);
        });
    }
}

const createUpArrow = () => {
    const upArrowDiv = document.createElement('div');
    upArrowDiv.setAttribute('class', 'up_arrow');
    upArrowDiv.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 559.39 718.42"><style>@keyframes draw{ to{ stroke-dashoffset: 0}} #UParrow{cursor:pointer; stroke:#ffffffdb} /* svg, g, path{fill:transparent; color:transparent} */ #backdrop{cursor:pointer} </style><g id="UParrow"><path class="balls" d="m238.52,665c-84.82,83.26-231.91,22.31-231.51-98-.26-74.29,60.5-136.59,136.5-136.5l-20.74,1.6c84.98-13.83,162.72,57.37,157.06,142.82,0,75.39,61.11,136.5,136.5,136.5,142.91-1.63,187.76-190.44,63.9-257.15-49.98-28.02-119.69-17.5-159,22.61" fill="transparent" stroke-linecap="round" stroke-linejoin="round" stroke-width="14"/><path class="shaft" d="m143.19,400.15V143.5c0-75.39,61.11-136.5,136.5-136.5s136.5,61.11,136.5,136.5v256.65" fill="transparent" stroke-linecap="round" stroke-linejoin="round" stroke-width="14"/><path class="glans" d="m416.19,184.09c-39.9,23.93-86.59,37.71-136.5,37.71s-96.6-13.77-136.5-37.71" fill="transparent" stroke-linecap="round" stroke-linejoin="round" stroke-width="14"/></g><path id="arrow" d="m214.44,182.19c26.98-25.08,48.73-53.96,65.26-86.65,19.17,33.44,41.71,62.61,68.27,86.65" fill="transparent" stroke="#ffffffdb" stroke-linecap="round" stroke-linejoin="round" stroke-width="13"/><rect id="backdrop" fill="transparent" cursor="pointer" width="559.4" height="718.4"/>
    </svg>`;
    document.querySelector("#content").insertAdjacentElement('afterend', upArrowDiv);
    return upArrowDiv;
}
const toggleUpArrowVisibility = (upArrowDiv) => {
    upArrowDiv.style.display = (window.scrollY >= window.innerHeight / 4) ? "block" : "none";
};
const scrollToTop = () => {
    window.scrollTo({
        top: 0,
        behavior: "smooth"
    });
};
const observeUpArrow = (upArrowDiv) => {
    const targetNode = document.querySelector("#content");
    const config = { childList: true, subtree: true };
    const callback = (mutationsList, observer) => {
        for (let mutation of mutationsList) {
            if (mutation.type === "childList") {
                observer.disconnect();
                upArrowDiv.addEventListener("click", scrollToTop);
            }
        }
    };
    const observer = new MutationObserver(callback);
    observer.observe(targetNode, config);
};
const UpArrowButton = () => {
    const upArrowDiv = createUpArrow();
    upArrowDiv.addEventListener("click", scrollToTop);
    observeUpArrow(upArrowDiv);
    window.addEventListener("scroll", () => toggleUpArrowVisibility(upArrowDiv));
    const svg = document.querySelector('svg');
    const UParrow = document.getElementById('UParrow');
    UParrow.style.opacity = 0;
    const backdrop = document.getElementById('backdrop');
    let isAnimated = false;
    UParrow.style.opacity = 0;
    UParrow.style.pointerEvents = 'none';
    function startUpArrowAnimation() {
        if (!isAnimated) {
            UParrow.style.opacity = 1;
            UParrow.style.pointerEvents = 'auto';
            const paths = UParrow.querySelectorAll('path');
            paths.forEach((path, index) => {
                const length = path.getTotalLength();
                path.style.strokeDasharray = length;
                path.style.strokeDashoffset = length;
                path.style.animation = 'draw 1s ease forwards ' + (index * 0.2) + 's';
            });
            isAnimated = true;
        } else {
            UParrow.querySelectorAll('path').forEach(path => path.style.animation = 'none');
            setTimeout(() => {
                const paths = UParrow.querySelectorAll('path');
                paths.forEach((path, index) => {
                    const length = path.getTotalLength();
                    path.style.strokeDasharray = length;
                    path.style.strokeDashoffset = length;
                    path.style.animation = 'draw 1s ease forwards ' + (index * 0.2) + 's';
                });
            }, 10);
        }
    }

    function hideUParrow() {
        UParrow.style.opacity = 0;
        UParrow.style.pointerEvents = 'none';
        isAnimated = false;
        UParrow.querySelectorAll('path').forEach(path => path.style.animation = 'none');
    }
    backdrop.addEventListener('mouseover', startUpArrowAnimation);
    backdrop.addEventListener('mouseout', hideUParrow);
    backdrop.addEventListener('mouseleave', hideUParrow);
};

// - - //

const headerTextObserver = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
        if (mutation.type === "childList") {
            const ModelTypeHeader = document.querySelector("header > div.modeltype_header");
            if (ModelTypeHeader) {
                window.addEventListener('resize', () => {
                    if (window.innerWidth < 1120) {
                        ModelTypeHeader.textContent = '';
                    } else if (window.innerWidth < 1680 && window.innerWidth >= 1120) {
                        ModelTypeHeader.textContent = ModelTypeHeader.getAttribute('trimmed');
                    } else if (window.innerWidth >= 1680) {
                        ModelTypeHeader.textContent = ModelTypeHeader.getAttribute('title');
                    }
                });
            }
        }
    });
});
headerTextObserver.observe(document.body, { childList: true, subtree: true });

let textarea;
let clearLink;
let switchCheckbox;
const clipboardCheckboxObserver = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
        if (mutation.type === "childList") {
            switchCheckbox = document.querySelector("#clipboard_switch");
            if (switchCheckbox && !textarea && !clearLink) {
                clipboardPanel = document.createElement("div");
                clipboardPanel.setAttribute('class', 'clipboard_panel')
                document.body.appendChild(clipboardPanel);
                textarea = document.createElement("textarea");
                clipboardPanel.appendChild(textarea);

                clearLink = document.createElement("a");
                clearLink.textContent = "–æ—á–∏—Å—Ç–∏—Ç—å";
                clearLink.addEventListener("click", function () {
                    textarea.value = "";
                    localStorage.setItem("clipboardText", "");
                });
                clipboardPanel.appendChild(clearLink);
                if (localStorage.getItem('checkboxState') === 'true') {
                    switchCheckbox.checked = true;
                    clipboardPanel.style.display = "flex";
                    textarea.value = localStorage.getItem("clipboardText") || "";
                } else {
                    switchCheckbox.checked = false;
                    clipboardPanel.style.display = "none";
                }
            }
        }
    });
});

clipboardCheckboxObserver.observe(document.body, { childList: true, subtree: true });

const withoutAnimeCheckboxObserver = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
        if (mutation.type === "childList") {
            let withoutAnimeCheckbox = document.querySelector("#without_anime");
            if (withoutAnimeCheckbox) {
                withoutAnimeCheckbox.checked = localStorage.getItem("without_anime") === "true";

                withoutAnimeCheckbox.addEventListener("change", function () {
                    localStorage.setItem("without_anime", withoutAnimeCheckbox.checked);
                });
                if (localStorage.getItem("without_anime") === "true") {
                    withoutAnimeCheckbox.checked = true;
                } else {
                    withoutAnimeCheckbox.checked = false;
                }
            }
        }
    });
});
withoutAnimeCheckboxObserver.observe(document.body, { childList: true, subtree: true });

document.addEventListener('click', function () {
    if (switchCheckbox) {
        switchCheckbox.addEventListener("change", function () {
            if (switchCheckbox.checked) {
                clipboardPanel.style.display = "flex";
                textarea.value = localStorage.getItem("clipboardText") || "";
            } else {
                clipboardPanel.style.display = "none";
                textarea.value = "";
                localStorage.setItem("clipboardText", "");
            }
            localStorage.setItem('checkboxState', switchCheckbox.checked);
        });
    }
});

let lastClipboardText = "";
async function readClipboard() {
    if (!switchCheckbox.checked) return;
    try {
        let clipboardText = await navigator.clipboard.readText();
        if (clipboardText.startsWith("https://civitai.com/api/download/models/") && clipboardText !== lastClipboardText) {
            let lines = textarea.value.split("\n");
            if (!lines.includes(clipboardText)) {
                textarea.value += "\n" + clipboardText;
                localStorage.setItem("clipboardText", textarea.value);
            }
            lastClipboardText = clipboardText;
        }
    } catch (e) {
        console.error(e);
    }
}
document.addEventListener("click", function () {
    readClipboard();
});

setInterval(function () {
    if (switchCheckbox) {
        if (localStorage.getItem('checkboxState') === 'true') {switchCheckbox.checked = true;} else {switchCheckbox.checked = false;}
        readClipboard();
    }
}, 1000);

// - - //

var server_code_example = `
<pre class="codeblock">
<code id="htmlViewer" style="color:#e6e1dc;font-weight:400;background-color:#232323;background:#232323;display:block;padding:.5em"><span class="codeline" style="color:#c26230;font-weight:400">import</span> os, webbrowser
<span class="codeline" style="color:#c26230;font-weight:400">from</span> http.server <span class="codeline" style="color:#c26230;font-weight:400">import</span> HTTPServer, SimpleHTTPRequestHandler
os.chdir(os.path.expanduser(<span class="codeline" style="color:#a5c261;font-weight:400">&#x27;~\\Desktop\\civitai_client&#x27;</span>)) <span class="codeline" style="color:#bc9458;font-weight:400"># –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ index.html –≤ –ø–∞–ø–∫–µ civitai_client –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ Windows</span>
httpd = HTTPServer((<span class="codeline" style="color:#a5c261;font-weight:400">&#x27;localhost&#x27;</span>, <span class="codeline" style="color:#a5c261;font-weight:400">8000</span>), SimpleHTTPRequestHandler)
webbrowser.<span class="codeline" style="color:#6d9cbe;font-weight:400">open</span>(<span class="codeline" style="color:#a5c261;font-weight:400">f&quot;http://localhost:8000&quot;</span>, new=<span class="codeline" style="color:#a5c261;font-weight:400">2</span>) <span class="codeline" style="color:#bc9458;font-weight:400"># –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–∞–π—Ç</span>
httpd.serve_forever()</code>
</pre>
`
var about = `
<div class="readme_modal"><div class="readme_modal_content"><h3 class="readme_modal_header">—ç—Ç–æ –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π –≤–µ–±-–∫–ª–∏–µ–Ω—Ç –¥–ª—è civitai.com –Ω–∞ JS</h3><ul><li>–∑–∞—á–µ–º —ç—Ç–æ –∏ –ø–æ—á–µ–º—É? <ul><li>–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç CivitAI –æ—á–µ–Ω—å —Ç–æ—Ä–º–æ–∑–Ω–æ–π;</li><li>–Ω–∞ CivitAI –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –º–æ–¥–µ–ª—è–º–∏, –∫–æ—Ç–æ—Ä–∞—è —Ç–æ–ª—å–∫–æ —É—Å—É–≥—É–±–ª—è–µ—Ç —Ç–æ—Ä–º–æ–∑–∞;</li><li>–µ–±–∞–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ –Ω–∞ CivitAI –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –ª–∏–±–æ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–≥–∞–º –ª–∏–±–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º;</li><li>–ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å CivitAI –∫–æ—Ç–æ—Ä—ã–π –º–µ—à–∞–µ—Ç –¥–µ–ª–∞—Ç—å –¥–ª—è —á–µ–≥–æ —Å–∞–π—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω: –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É.</li></ul></li><li>–∫–∞–∫ —ç—Ç–æ? <ul><li>JS –ø–æ–ª—É—á–∞–µ—Ç –ø–æ api –¥–∞–Ω–Ω—ã–µ –≤ json –∏ –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã;</li><li>—Å–∞–º "—Å–∞–π—Ç" –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç, –≤—Å–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å CivitAI –ø—Ä—è–º–æ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è;</li><li>–∏–∑ –≤—ã–¥–∞—á–∏ —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ –º–æ–¥–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è —Å–∫–∞—á–∞—Ç—å: –∞—Ä—Ö–∏–≤–Ω—ã–µ, —É–¥–∞–ª–µ–Ω–Ω—ã–µ, —Å —Ä–∞–Ω–Ω–∏–º –ø–ª–∞—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º;</li><li>–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ç–æ—Ä–º–æ–∑–æ–≤ –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã —Ä–µ—à–∏—à—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë –æ—Ç –ø–µ—Ä–≤–æ–π –¥–æ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏;</li><li>—Å–ª–µ–≤–∞ –≤–≤–µ—Ä—Ö—É –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –º–æ–¥–µ–ª–∏, –ª–æ—Ä—ã, –ª–∏–∫–æ—Ä–∏—Å—ã, –≤–Ω–µ–¥—Ä–µ–Ω–∏—è, –≤–∞—ç, –≥–∏–ø–µ—Ä—Å–µ—Ç–∏, –∫–æ–Ω—Ç—Ä–æ–ª–Ω–µ—Ç, –ø–æ–∑—ã, –¥—Ä—É–≥–æ–µ;</li><li>–≤–µ—Ä—Ö–Ω–µ–µ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏;</li><li>–ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –Ω–∞ –≤—ã–¥–∞—á—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–∫ –ø–æ —Ç–µ–≥–∞–º, —Ç–∞–∫ –∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥–µ–ª–µ–π, —Ç–∞–∫ –∏ –ø–æ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É - –≤—Å–µ —ç—Ç–æ –ø–æ—Ç–æ–º —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ –µ–¥–∏–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ;</li><li>–µ—Å–ª–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –º–æ–¥–µ–ª–∏ —É–∫–∞–∑–∞–Ω—ã —Ç–µ–≥–∏, –ø–æ –Ω–∏–º –ø–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–µ–≥—É; </li><li>–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∫–ª–∏–∫–µ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞;</li><li>—Å–ø—Ä–∞–≤–∞ —Å—Ç—Ä–µ–ª–æ—á–∫–∞ - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏;</li><li>–ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏ –∏ —Ç–∞–∫–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–º—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ;</li><li>–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –æ–ø—Ü–∏—é –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –≤ —à–∞–ø–∫–µ, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–æ–ª–∞–±–µ –∏–ª–∏ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∫–∞—á–∞–ª–∫–µ;</li><li>–∏–∑ –≤—ã–¥–∞—á–∏ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–≥–æ–º "anime" - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–µ-–≥–ª–∞–∑ –≤ —à–∞–ø–∫–µ –Ω–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π;</li><li>–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –Ω–µ–±–æ–ª—å—à–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ—á–∫–∏, –Ω–æ –ø–æ –Ω–∏–º –º–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä;</li><li>–Ω–∞–¥ –ø—Ä–µ–≤—å—é—à–∫–∞–º–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –∫–Ω–æ–ø–∫–∏-—Å—Ç—Ä–µ–ª–æ—á–∫–∏: –∏—Ö –º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ (—è —Ä–µ—à–∏–ª –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—è—Ç—å—é) –≤–º–µ—Å—Ç–µ —Å –∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã), –∞ –µ—Å–ª–∏ —Å—Ç—Ä–µ–ª–æ—á–µ–∫ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞;</li><li>–≤–Ω–∏–∑—É –µ—Å—Ç—å —Å–ø–æ–π–ª–µ—Ä "–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" - —á—Ç–æ–±—ã –ø–æ—á–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞–≤–∏–ª –∞–≤—Ç–æ—Ä (–∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —è –∑–∞–±–æ—Ç–ª–∏–≤–æ —É–¥–∞–ª—è—é –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–Ω–∞—Ç—ã –∏ —Ç.–ø. –µ—Ä—É–Ω–¥—É);</li><li>–∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—É–∫–∏—Å—ã, –∞ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –µ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ (–∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Ç–æ–º –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏);</li><li>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –ø–æ—Å—Ç—ã, –æ–±–∑–æ—Ä—ã –∏ —Ç.–ø. - —É–¥–∞–ª–µ–Ω–æ –∑–∞ –Ω–µ–Ω–∞–¥–æ–±–Ω–æ—Å—Ç—å—é.</li></ul></li><li>–∫–∞–∫–∏–µ –ø–æ–¥–≤–æ–¥–Ω—ã–µ? <ul><li>—Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∞–º–æ–≥–æ CivitAI: –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (—á—Ç–æ –Ω–µ —Ä–µ–¥–∫–æ –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç) - –±—É–¥–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç;</li><li>–∏–Ω–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ api –º–æ–≥—É—Ç –¥–æ–ª–≥–æ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å—Å—è, –∏–ª–∏ –≤–æ–æ–±—â–µ CivitAI –ø—Ä–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–º –∑–∞–µ–±–µ –≤—ã–¥–∞—Å—Ç html-–∑–∞–≥–ª—É—à–∫—É - –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ, —á—Ç–æ–±—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –Ω–µ –ª—é–±–æ–≤–∞—Ç—å—Å—è –ø–∏—Å—é–Ω–æ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∞–≤–æ—Å—å –∞–ø–∏ –æ–¥—É–ø–ª–∏—Ç—Å—è;</li><li>–∏–Ω–æ–≥–¥–∞ –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω—É –æ—á–µ–Ω—å –¥–æ–ª–≥–æ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è - —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–µ–ª–∞–µ—à—å, –ø—Ä–∏–¥–µ—Ç—Å—è —Ç–µ—Ä–ø–µ—Ç—å, –∫–∞–∫ –∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ.</li><li>–Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö –≤—Å–µ —ç—Ç–æ –º–æ–∂–µ—Ç –≤–æ–æ–±—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ CORS - –∫–ª–∏–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–º –¥–æ–º–µ–Ω–µ (–∑–¥–µ—Å—å), –∞ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è —Å –¥—Ä—É–≥–æ–≥–æ –¥–æ–º–µ–Ω–∞ (—Ü–∏–≤–∏—Ç–∞–∏), —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —á–µ–º-—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º, –Ω–æ –≤—ã—Ö–æ–¥ –Ω–∞–π—Ç–∏ –º–æ–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä (—Ç–æ—á–Ω–µ–µ –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–±–æ—Ä_–æ—á–∫—É), –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ <code>--disable-web-security</code>, –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: <a href="https://chrome.google.com/webstore/search/Cross%20Domain%20-%20CORS?_category=extensions" target="_blank" rel="noopener noreferrer">–¥–ª—è —Ö—Ä–æ–º–µ</a> –∏–ª–∏ <a href="https://addons.mozilla.org/en-US/firefox/search/?q=Cross%20Domain%20-%20CORS target="_blank" rel="noopener noreferrer">—Ñ–∞–µ—Ä—Ñ–æ–∫—Å–∞</a>;</li><li>–ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–º–Ω–æ–π), —Ç—É—Ç –Ω–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∏–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π —Ç–µ–±—è —Ç–µ–º–µ - –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –º–µ—à–∞–µ—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –∫–æ–ø–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∏—Å—Ç–æ –ø–æ–¥ —Å–µ–±—è.</li></ul></li><li>–º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ? <ul><li>–¥–∞, –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ html-—Ñ–∞–π–ª–∏–∫ –ª–æ–∫–∞–ª—å–Ω–æ, –ª–∏–±–æ –æ—Ç–∫–ª—é—á–∏–≤ –ø–æ–ª–∏—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ CORS –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –ª–∏–±–æ –ø–æ–¥–Ω—è–≤ –ø—Ä–æ—Å—Ç–æ–π http-—Å–µ—Ä–≤–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞ Python —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ –ø–∞—Ä—É —Å—Ç—Ä–æ—á–µ–∫:${server_code_example} </li></ul></li><li>–∫—É–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–æ–Ω–æ—Å? <ul><li><a href="https://t.me/stabdiff" target="_blank" rel="noopener noreferrer">–≤ —ç—Ç—É –≥—Ä—É–ø–ø—É</a></li></ul></li></ul></div></div>
`
var footer_content = `
<footer><div class="readme"><a>—ç—Ç–æ —á—Ç–æ –≤–æ–æ–±—â–µ —Ç–∞–∫–æ–µ –∏ –∫–∞–∫ —ç—Ç–æ?</a></div><div class="links">–ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: <a href="https://t.me/Civitai_models" target="_blank" rel="noopener noreferrer">–±—ç–∫–∞–ø —Ü–∏–≤–∏—Ç–∞–∏</a> | <a href="https://colab.research.google.com/drive/1TC4SSLncPWytSPvquR6Y4-U7wZRfAXrV" target="_blank" rel="noopener noreferrer">–∫–æ–ª–∞–±</a> | <a href="https://t.me/stabdiff" target="_blank" rel="noopener noreferrer">–≥—Ä—É–ø–ø–∞</a></div><div class="sitedescription">–ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π –≤–µ–±-–∫–ª–∏–µ–Ω—Ç civitai.com</div></footer>${about}
`
